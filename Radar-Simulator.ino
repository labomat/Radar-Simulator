/*********************************************************************

  Radar-Simulator

  Simuliert den Bildschirm eines alten Radargeräts mit einem kreisförmig drehenden Strahl für Modellschiffe.
  Läuft mit einem 0.96" OLED-Display mit 64x128 Pixeln (solle mit jedem 1306 kompatiblen Display funktionieren)
  und einem Arduino Pro Mini (5V, 16 MHz)

  Simulates the display of an vintage radar screen with rotating beam for a model ship. Uses 0.96" oled
  display with 64x128 pixel and an Arduino pro mini (5V, 16 MHz).

  CC-BY SA 2016 Kai Laborenz

*********************************************************************/
//#include <avr/power.h>
#include <SPI.h>
#include <Wire.h>
//#include <Adafruit_GFX.h>
//#include <Adafruit_SSD1306.h>
#include <U8g2lib.h>

#define OLED_RESET 4
//Adafruit_SSD1306 display(OLED_RESET);

//U8G2_SSD1306_64X32_1F_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

#define REFRESH 0 // refresh rate for radar screen (turn speed of line)

 // 'Radarscreen' bitmap
const unsigned char backgroundMap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x0c, 0x01, 0x20, 0x80, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x1e, 0x00, 0x00, 0x0c, 0x02, 0x20, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1e, 0x9e, 0x00, 0x00, 0x0c, 0x02, 0x21, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xde, 0x00, 0x00, 0x0c, 0x02, 0x01, 0x00, 0x30, 0x04, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xce, 0x00, 0x1c, 0x08, 0x02, 0x02, 0x06, 0x18, 0x03, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x0e, 0x0e, 0x00, 0x1e, 0x08, 0x24, 0x02, 0x07, 0x38, 0x00, 0x06, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x02, 0x0e, 0x00, 0x1c, 0x18, 0x34, 0x02, 0x00, 0x70, 0x00, 0x02, 0xc1, 0x00, 0x00, 
  0x00, 0x06, 0x02, 0x1c, 0x00, 0x1c, 0x18, 0xe4, 0x04, 0x00, 0x30, 0x00, 0x00, 0x63, 0x38, 0x00, 
  0x00, 0x02, 0x00, 0x08, 0x00, 0x04, 0x10, 0x04, 0x04, 0x00, 0x38, 0x00, 0x00, 0x30, 0x84, 0x00, 
  0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x10, 0x08, 0x24, 0x00, 0x10, 0x00, 0x00, 0x24, 0x04, 0x00, 
  0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x30, 0x08, 0x04, 0x06, 0x00, 0x00, 0x00, 0x48, 0x04, 0x00, 
  0x00, 0x01, 0x80, 0x06, 0x00, 0x00, 0x20, 0x08, 0x04, 0x0e, 0x00, 0x00, 0x06, 0x98, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x00, 0x01, 0x90, 0x02, 0x00, 
  0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x02, 0x00, 
  0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0xe0, 0x00, 0x0d, 0xa0, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0xc0, 0x01, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x0f, 0xdc, 0x03, 0x03, 0x00, 0x20, 0x00, 0x00, 0x00, 0x0d, 0x80, 0xd0, 0x01, 0x00, 
  0x00, 0x00, 0x8f, 0xdc, 0x0f, 0x86, 0x00, 0x00, 0x00, 0x00, 0x21, 0x01, 0x80, 0x04, 0x1e, 0x00, 
  0x00, 0x00, 0x0e, 0xc0, 0x09, 0x8c, 0x03, 0x40, 0x08, 0x00, 0x00, 0x08, 0x00, 0x22, 0x30, 0x00, 
  0x00, 0x00, 0x01, 0xc0, 0x10, 0x88, 0x03, 0x40, 0x70, 0x01, 0xfd, 0x90, 0x04, 0x00, 0xb0, 0x00, 
  0x00, 0x00, 0x00, 0x80, 0x00, 0x90, 0x0e, 0x80, 0xe0, 0x07, 0xf0, 0x00, 0x18, 0x00, 0x70, 0x00, 
  0x00, 0x06, 0x00, 0x00, 0x09, 0xb0, 0x01, 0x0e, 0x40, 0x3c, 0x06, 0x00, 0x18, 0x02, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x4e, 0x1f, 0x30, 0x00, 0x18, 0x00, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x7f, 0xf6, 0xb4, 0x38, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x1e, 0x00, 0x00, 
  0x3e, 0x00, 0x00, 0x3e, 0xc7, 0xad, 0x79, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 
  0x32, 0x18, 0x00, 0x00, 0xde, 0x1c, 0x39, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00, 
  0x00, 0x10, 0x00, 0x01, 0x7c, 0x3c, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x20, 0x60, 0x00, 
  0x00, 0x30, 0x80, 0x07, 0x43, 0x00, 0x00, 0x00, 0x06, 0x03, 0xc0, 0x00, 0x00, 0x46, 0x60, 0x00, 
  0x00, 0xe1, 0x81, 0xfd, 0x50, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x88, 0x80, 0x00, 
  0x81, 0xe1, 0x87, 0x01, 0x8c, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00, 
  0x73, 0xf1, 0x86, 0x08, 0x30, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x60, 0x00, 
  0x0e, 0x3d, 0x86, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 
  0x0c, 0x18, 0x82, 0x30, 0x00, 0x00, 0x00, 0x20, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x08, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0x80, 0x20, 0x00, 0x00, 0x00, 0x60, 0x00, 
  0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x70, 0x00, 0x03, 0x01, 0x40, 0x00, 
  0x10, 0x00, 0x00, 0x00, 0x01, 0x10, 0x03, 0x00, 0x00, 0x08, 0xc0, 0x00, 0x02, 0x00, 0x80, 0x00, 
  0x60, 0x03, 0x00, 0x40, 0x01, 0x18, 0x0c, 0x00, 0x00, 0x08, 0x40, 0x00, 0x06, 0x00, 0x40, 0x00, 
  0x80, 0x01, 0x04, 0x00, 0x01, 0x08, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x04, 0x04, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0c, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x20, 0x00, 
  0x00, 0x00, 0x83, 0x08, 0x01, 0x18, 0x06, 0x00, 0x0c, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x10, 0x00, 
  0x00, 0x00, 0x10, 0x00, 0x01, 0x08, 0x0c, 0x00, 0x00, 0x32, 0x00, 0x08, 0x00, 0x60, 0x10, 0x00, 
  0x00, 0x00, 0x60, 0x3c, 0x00, 0x00, 0x08, 0x00, 0x00, 0x63, 0xe0, 0x00, 0x00, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0x00, 0x00, 0x10, 0x00, 0x60, 0x00, 0x00, 0x10, 0x00, 0x00, 0x64, 0x08, 0x00, 
  0x00, 0x00, 0x04, 0x20, 0x04, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x63, 0x06, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x08, 0xe0, 0x30, 0x63, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x60, 0x03, 0x80, 0x07, 0xf0, 0x08, 0xf6, 0x00, 0x80, 
  0x80, 0x00, 0x08, 0x0c, 0x11, 0xd0, 0x80, 0x00, 0x00, 0xc0, 0x00, 0x60, 0xe4, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x18, 0x19, 0x91, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x87, 0x00, 0x40, 
  0x00, 0x00, 0x3f, 0x18, 0x2c, 0x07, 0x00, 0x00, 0x33, 0x80, 0x00, 0x63, 0x64, 0x53, 0x8c, 0x40, 
  0xc0, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x80, 0x00, 0x70, 0xc2, 0x08, 0x1c, 0x40, 
  0x40, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x20, 0xe2, 0x06, 0x38, 0x20, 
  0x80, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0c, 0x10, 0x10, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x0c, 0x06, 0x01, 0x0e, 0x00, 0x04, 
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x01, 0x0f, 0x00, 0x04, 
  0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0xc4, 0xc0, 0x04, 
  0x80, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x30, 0x24, 0x40, 0x00, 
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xf0, 0x12, 0x20, 0x02, 
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x2e, 0x70, 0x0e, 0x20, 0x02, 
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x74, 0x30, 0x00, 0x20, 0x00, 
  0x38, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x74, 0x30, 0x00, 0x10, 0x04, 
  0x1e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x32, 0x60, 0x00, 0x08, 0x04, 
  0x0f, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0xc0, 0x00, 0x38, 0x04, 
  0x03, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0xc0, 0x00, 0x78, 0xe4
};

int lh; //lineheight
int dw; // displayWidth
int dh; // displayHeight

//#if (SSD1306_LCDHEIGHT != 64)
//#error("Height incorrect, please fix Adafruit_SSD1306.h!");
//#endif

void testscrolltext(void) {
  
  u8g2.setFont(u8g2_font_profont11_tr);  // choose a suitable font
  //display.setTextColor(WHITE);
  u8g2.clearBuffer();
  lh = u8g2.getMaxCharHeight();
  u8g2.setCursor(1,20);
  u8g2.print("Radar");
  u8g2.setCursor(1,20+lh); //start on next line
  u8g2.print("startet");
  u8g2.sendBuffer();
  
  delay(800);
  u8g2.print(".");
  u8g2.sendBuffer();
  delay(800);
  u8g2.print(".");
  u8g2.sendBuffer();
  delay(800);
  u8g2.print(".");
  u8g2.sendBuffer();

  u8g2.setCursor(1,20+(3*lh)); //start on next line
  u8g2.print(dw);
  u8g2.print("x");
  u8g2.print(dh);
  u8g2.sendBuffer();
  
  delay(300);
  u8g2.clearDisplay();
}

void drawScreen(void) {
  u8g2.clearBuffer();
  // draws circles on display
  u8g2.drawDisc(dw/2, dh/2, 2, U8G2_DRAW_ALL);
  u8g2.drawCircle(dw/2, dh/2, 15, U8G2_DRAW_ALL);
  u8g2.drawCircle(dw/2, dh/2, 30, U8G2_DRAW_ALL);
  u8g2.drawCircle(dw/2, dh/2, 45, U8G2_DRAW_ALL);
  u8g2.drawCircle(dw/2, dh/2, 60, U8G2_DRAW_ALL);
  u8g2.sendBuffer();
}


void setup()   {          
 // if (F_CPU == 16000000) clock_prescale_set(clock_div_1);      
  Serial.begin(9600);

  //display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  u8g2.begin();
  // init done

  dw = u8g2.getDisplayWidth();
  dh = u8g2.getDisplayHeight();
  

  // Clear the buffer.
  //display.clearDisplay();
  u8g2.clearDisplay();

  //display.setRotation(1);
  //testscrolltext();
  //drawScreen();
  
  //display.clearDisplay();
  //display.setRotation(2);
}

void loop() {

// simulated rotating beam by drawing a line from center to display border
// end point for line is calculated in 4 phases for each side
u8g2.clearDisplay();
u8g2.clearBuffer();

for(int x = 0; x < dw; x++){
    u8g2.setDrawColor(0);
    u8g2.drawLine(dw/2, dh/2, x-1, 0);
    u8g2.setDrawColor(1);
    u8g2.drawLine(dw/2, dh/2, x, 0);
    u8g2.drawLine(dw/2, dh/2, x+1, 0);
    //u8g2.drawXBMP( 0, 0, dw, dh, backgroundMap);
    u8g2.sendBuffer();
    delay(REFRESH);
  }

for(int x = 0; x < dh; x++){
    u8g2.setDrawColor(0);
    u8g2.drawLine(dw/2, dh/2, dw-1, x-1);
    u8g2.setDrawColor(1);
    u8g2.drawLine(dw/2,dh/2, dw-1, x);
    u8g2.drawLine(dw/2, dh/2, dw-1, x+1);

    u8g2.sendBuffer();
    delay(REFRESH); 
}     

for(int x = dw; x > 0; x--){
    u8g2.setDrawColor(0);
    u8g2.drawLine(dw/2, dh/2, x+1, dh-1);
    u8g2.drawLine(dw/2, dh/2, x+2, dh-1);
    u8g2.setDrawColor(1);
    u8g2.drawLine(dw/2, dh/2, x, dh-1);
    u8g2.drawLine(dw/2, dh/2, x-1, dh-1);

    u8g2.sendBuffer();
    delay(REFRESH); 
  }

for(int x = dh; x > 0; x--){
    u8g2.setDrawColor(0);
    u8g2.drawLine(dw/2, dh/2, 0, x+1);
    u8g2.setDrawColor(1);
    u8g2.drawLine(dw/2, dh/2, 0, x);
    u8g2.drawLine(dw/2, dh/2, 0, x-1);
    u8g2.sendBuffer();
   delay(REFRESH);
  }


//  u8g2.drawLine(dw/2, dh/2, 0, 1, BLACK); // needed to get rid of some artefact lines
//  u8g2.drawLine(dw/2, dh/2, 1, 1, BLACK);
}
